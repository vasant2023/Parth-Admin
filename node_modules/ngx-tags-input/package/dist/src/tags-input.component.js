"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var noop = function () { };
var ɵ0 = noop;
exports.ɵ0 = ɵ0;
var TAGS_INPUT_TEMPLATE = "\n    <div class=\"tags-input\">\n        <span class=\"tags-input__tag label label-primary\" *ngFor=\"let tag of tags\">\n            {{tag[displayField]}}\n            <span *ngIf=\"isDeleteable(tag)\" role=\"button\" class=\"tags-input__tag-remove-btn\" (click)=\"removeTag(tag)\" (touch)=\"removeTag(tag)\">\n                <span aria-hidden=\"true\">&times;</span>\n                <span class=\"sr-only\">Close</span>\n            </span>\n        </span>\n        <input\n            *ngIf=\"options === null\" \n            class=\"tags-input__input-field\" \n            type=\"text\" \n            placeholder=\"{{ getPlaceHolder() }}\"\n            name=\"tags\"\n            (keyup.enter)=\"addTag(tagInput)\" (keydown.backspace)=\"removeLastTag(tagInput)\"\n            [disabled]=\"maximumOfTagsReached()\"\n            [hidden]=\"maximumOfTagsReached()\"\n            #tagInput />\n        <input\n            *ngIf=\"options !== null\" \n            class=\"tags-input__input-field\" \n            type=\"text\" \n            placeholder=\"{{ getPlaceHolder() }}\"\n            name=\"tags\"\n            (keydown.backspace)=\"removeLastTag(tagInput)\"\n            [(ngModel)]=\"selected\" \n            [typeahead]=\"options\"\n            [typeaheadOptionField]=\"displayField\"\n            (typeaheadOnSelect)=\"typeaheadOnSelect($event)\"\n            (typeaheadNoResults)=\"typeaheadOnNoMatch($event)\"\n            [disabled]=\"maximumOfTagsReached()\"\n            [hidden]=\"maximumOfTagsReached()\"\n            #tagInput />\n    </div>\n";
var TAGS_INPUT_STYLE = "\n    :host {\n        overflow: auto;\n        white-space: nowrap;\n    }\n\n    .tags-input {\n        align-items: center;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .tags-input__tag {\n        display: inline-block;\n        margin-bottom: 2px;\n        margin-right: 5px;\n        padding-right: 0.3em;\n    }\n\n    .tags-input__tag-remove-btn {\n        cursor: pointer;\n        display: inline-block;\n        font-size: 12px;\n        margin: -3px 0 0 3px;\n        padding: 0;\n        vertical-align: top;\n    }\n\n    .tags-input__input-field {\n        border: none;\n        flex-grow: 1;\n        outline: none;\n    }\n";
var CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR = {
    provide: forms_1.NG_VALUE_ACCESSOR,
    useExisting: core_1.forwardRef(function () { return TagsInputComponent; }),
    multi: true
};
var TagsInputComponent = (function () {
    function TagsInputComponent() {
        this.selected = '';
        this.tags = [];
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.removeLastOnBackspace = false;
        this.canDeleteTags = true;
        this.placeholder = '';
        this.options = null;
        this.displayField = 'displayValue';
        this.onTagsChanged = new core_1.EventEmitter();
        this.onMaxTagsReached = new core_1.EventEmitter();
        this.onNoOptionsMatch = new core_1.EventEmitter();
    }
    TagsInputComponent.prototype.ngOnInit = function () { };
    TagsInputComponent.prototype.getPlaceHolder = function () {
        if (this.tags.length > 0) {
            return '';
        }
        return this.placeholder;
    };
    TagsInputComponent.prototype.tagsChanged = function (type, tag) {
        this.onChangeCallback(this.tags);
        this.onTagsChanged.emit({
            change: type,
            tag: tag
        });
        if (this.maximumOfTagsReached()) {
            this.onMaxTagsReached.emit();
        }
    };
    TagsInputComponent.prototype.removeLastTag = function (tagInput) {
        if (!this.removeLastOnBackspace || !this.tags.length) {
            return;
        }
        if (tagInput.value === '') {
            this.removeTag(this.tags[this.tags.length - 1]);
        }
    };
    TagsInputComponent.prototype.addTag = function (tagInput) {
        if (tagInput.value.trim() !== '') {
            var tag = (_a = {},
                _a[this.displayField] = tagInput.value,
                _a);
            this.addPredefinedTag(tag);
        }
        tagInput.value = '';
        var _a;
    };
    TagsInputComponent.prototype.addPredefinedTag = function (tag) {
        if (!this.maximumOfTagsReached()) {
            this.tags.push(tag);
            this.tagsChanged('add', tag);
        }
    };
    TagsInputComponent.prototype.removeTag = function (tagToRemove) {
        if (!this.isDeleteable(tagToRemove)) {
            return;
        }
        this.tags = this.tags.filter(function (tag) { return tagToRemove !== tag; });
        this.tagsChanged('remove', tagToRemove);
    };
    TagsInputComponent.prototype.maximumOfTagsReached = function () {
        return typeof this.maxTags !== 'undefined' && this.tags.length >= this.maxTags;
    };
    TagsInputComponent.prototype.isDeleteable = function (tag) {
        if (typeof tag.deleteable !== "undefined" && !tag.deleteable) {
            return false;
        }
        return this.canDeleteTags;
    };
    TagsInputComponent.prototype.typeaheadOnSelect = function (e) {
        if (typeof e.item === 'string') {
            this.addPredefinedTag((_a = {},
                _a[this.displayField] = e.value,
                _a));
        }
        else {
            this.addPredefinedTag(e.item);
        }
        this.selected = '';
        var _a;
    };
    TagsInputComponent.prototype.typeaheadOnNoMatch = function (e) {
        if (typeof this.onNoOptionsMatch !== 'undefined') {
            this.onNoOptionsMatch.emit(e);
        }
    };
    TagsInputComponent.prototype.writeValue = function (value) {
        if (value !== this.tags) {
            this.tags = value;
        }
    };
    TagsInputComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    TagsInputComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    TagsInputComponent.decorators = [
        { type: core_1.Component, args: [{
                    selector: 'tags-input',
                    template: TAGS_INPUT_TEMPLATE,
                    styles: [TAGS_INPUT_STYLE],
                    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]
                },] },
    ];
    /** @nocollapse */
    TagsInputComponent.ctorParameters = function () { return []; };
    TagsInputComponent.propDecorators = {
        "maxTags": [{ type: core_1.Input },],
        "removeLastOnBackspace": [{ type: core_1.Input },],
        "canDeleteTags": [{ type: core_1.Input },],
        "placeholder": [{ type: core_1.Input },],
        "options": [{ type: core_1.Input },],
        "displayField": [{ type: core_1.Input },],
        "onTagsChanged": [{ type: core_1.Output },],
        "onMaxTagsReached": [{ type: core_1.Output },],
        "onNoOptionsMatch": [{ type: core_1.Output },],
    };
    return TagsInputComponent;
}());
exports.TagsInputComponent = TagsInputComponent;
//# sourceMappingURL=tags-input.component.js.map